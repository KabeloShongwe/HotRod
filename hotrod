#!/bin/bash
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
STARTTIME=$(date +%s)
cd $DIR

declare -a TOOLS=("docker" "docker-machine" "docker-compose" "mini.py")

#Inspired by and bits copied from https://github.com/zettio/weave

usage() {
    echo "Usage:"
    echo "hotrod init"
    echo "hotrod up"
#     echo "hotrod update"
    exit 1
}

COMMAND=$1

[ $# -gt 0 ] || usage

shift 1

CONFIGFILE=$DIR/default.yml
CONFIGTEMPLATE=$DIR/docs/default.yml

export FWDPORT=8999
export USER=$(whoami)
export HOTROD_HOST_USER=root
export HOTROD_HOST_SUDO=yes
export HOTROD_HOSTNAME=$HOTROD_HOSTNAME
export WEAVE_SECRET=$(openssl rand -hex 32)
export HOTROD_AUTH_SECRET=$(openssl rand -hex 32)
export HOTROD_ADMIN_AUTH_SECRET=$(openssl rand -hex 32)
export LDAP_MANAGER_PASSWORD=$(openssl rand -hex 12)
[ -n "$HOTROD_PROJECTFS" ]  || export HOTROD_PROJECTFS=https://github.com/panoptix-za/hotrod-projectfs.git
[ -n "$HOTROD_ADMIN_SETTINGS" ]  || export HOTROD_ADMIN_SETTINGS=https://github.com/panoptix-za/hotrod-admin-settings.git

# utility function to check whether a command can be executed by the shell
# see http://stackoverflow.com/questions/592620/how-to-check-if-a-program-exists-from-a-bash-script
command_exists () {
    command -v $1 >/dev/null 2>&1
}

# Technique from https://github.com/rroemhild/docker-ejabberd/blob/master/run
readonly PYTHON_JINJA2="import os;
import sys;
import jinja2;
sys.stdout.write(
    jinja2.Template
        (sys.stdin.read()
    ).render(env=os.environ))"

make_config() {
    echo "Generating config file..."
    cat ${CONFIGTEMPLATE} \
      | python -c "${PYTHON_JINJA2}" \
      > ${CONFIGFILE}
}

end_time() {
  ENDTIME=$(date +%s)
  echo "$(($ENDTIME - $STARTTIME)) seconds elapsed..."
  cd $DIR
}

trim() {
    echo $*
}

create_default_yml() {
  clear
  echo "Welcome to the HotRod initialisation script"
  echo ""
  
  export HOTROD_PROJNAME=Hotrod
  
  while true; do
    read -p "Please specify your HotRod project name [$HOTROD_PROJNAME]:" hotrodproj
    [ -z $hotrodproj ] || HOTROD_PROJNAME=$hotrodproj
    [  -n "$HOTROD_PROJNAME" ] && break 
  done
  
  find_machine
  if [[ "$THIS_MACHINE" != "" ]]; then
    export HOTROD_HOSTNAME=$(docker-machine ip $THIS_MACHINE)
  fi
    
  while true; do
    read -p "Please specify your HotRod server hostname [$HOTROD_HOSTNAME]:" hotrodurl
    [ -z $hotrodurl ] || HOTROD_HOSTNAME=$hotrodurl
    [  -n "$HOTROD_HOSTNAME" ] && break 
  done
  
#   while true; do
#     read -p "Please specify a username for $HOTROD_HOSTNAME [$HOTROD_HOST_USER]:" hotroduser
#     [ -z $hotroduser ] || HOTROD_HOST_USER=$hotroduser
#     [  -n "$HOTROD_HOST_USER" ] && break 
#   done  
#   
#   read -p 'Use SUDO? YES/NO: ' answer
#   case "${answer}" in
#       [yY]|[yY][eE][sS])
#           HOTROD_HOST_SUDO=True
#           ;;
#       *)
#           HOTROD_HOST_SUDO=False
#           ;;
#   esac  

  while true; do
     [ -n "$WEAVE_SECRET" ] && break
     read -p "Please specify a Weave Secret:" WEAVE_SECRET
  done
  while true; do
     [ -n "$HOTROD_AUTH_SECRET" ] && break
     read -p "Please specify a HotRod Auth Secret:" HOTROD_AUTH_SECRET
  done
  while true; do
     [ -n "$HOTROD_ADMIN_AUTH_SECRET" ] && break
     read -p "Please specify a HotRod-Admin Auth Secret:" HOTROD_ADMIN_AUTH_SECRET
  done 
  while true; do
     [ -n "$LDAP_MANAGER_PASSWORD" ] && break
     read -p "Please specify a LDAP Manager Password:" LDAP_MANAGER_PASSWORD
  done 
#   while true; do
#     read -p "Please specify your HotRod projectfs URL [$HOTROD_PROJECTFS]:" hotrodpfsurl
#     [ -z $hotrodpfsurl ] || HOTROD_PROJECTFS=$hotrodpfsurl
#     [  -n "$HOTROD_PROJECTFS" ] && break 
#   done     
#   while true; do
#     read -p "Please specify your HotRod admin settings URL [$HOTROD_ADMIN_SETTINGS]:" hotrodasurl
#     [ -z $hotrodasurl ] || HOTROD_ADMIN_SETTINGS=$hotrodasurl
#     [  -n "$HOTROD_ADMIN_SETTINGS" ] && break 
#   done     
  while true; do
    echo "Please provide a password for the default admin account."
    adminpasswd=$(slappasswd -h {SSHA} | base64)
    [ -z $adminpasswd ] || ADMIN_PASSWD=$adminpasswd
    [  -n "$ADMIN_PASSWD" ] && break 
  done  
  
  DEFAULT_USER='default'
  DEFAULT_USER_FIRSTNAME='Default'  
  DEFAULT_USER_LASTNAME='User'    
  
  
  while true; do
    read -p "Please specify your HotRod default username [$DEFAULT_USER]:" defaultuser
    [ -z $defaultuser ] || DEFAULT_USER=$defaultuser
    [  -n "$DEFAULT_USER" ] && break 
  done  
  while true; do
    read -p "Please specify your HotRod default user firstname [$DEFAULT_USER_FIRSTNAME]:" defaultuser
    [ -z $defaultuser ] || DEFAULT_USER_FIRSTNAME=$defaultuser
    [  -n "$DEFAULT_USER_FIRSTNAME" ] && break 
  done  
  while true; do
    read -p "Please specify your HotRod default user lastname [$DEFAULT_USER_LASTNAME]:" defaultuser
    [ -z $defaultuser ] || DEFAULT_USER_FIRSTNAME=$defaultuser
    [  -n "$DEFAULT_USER_FIRSTNAME" ] && break 
  done  
  while true; do
    echo "Please provide a password for the default user account."
    password=$(slappasswd -h {SSHA} | base64)
    [ -z $adminpasswd ] || DEFAULT_USER_PASSWD=$password
    [  -n "$DEFAULT_USER_PASSWD" ] && break 
  done  
 
  export ADMIN_PASSWD
  export DEFAULT_USER
  export DEFAULT_USER_FIRSTNAME
  export DEFAULT_USER_LASTNAME  
  export DEFAULT_USER_PASSWD
  
  [ -f $DIR/default.yml ] && mv $DIR/default.yml $DIR/default.yml.prev
  make_config
    
}

TEMPLATES=""
RUNFILES=""

recurse() {
 for i in "$1"/*;do
    if [ -f "$i" ]; then
        if [[ "$i" == *dc-* && "$i" == *.yml.run ]]; then
           RUNFILES="$RUNFILES $i"
        fi 
        if [[ "$i" == *dc-* && "$i" == *.yml ]]; then           
           TEMPLATES="$TEMPLATES $i"
        fi
    elif [ -d "$i" ];then
        recurse "$i"
    fi
 done
}

compose_up() {
  cd $DIR
  
  mini.py
  
  recurse .
  
  if [[ ! "$RUNFILES" == "" ]]; then
    read -p 'Old .run files detected, do you wish do clear and recreate ALL containers? YES/NO: ' answer
    case "${answer}" in
        [yY]|[yY][eE][sS])
            for i in $RUNFILES; do
              rm $i
            done            
            ;;
        *)
          echo "Skipping 'run once' compose files..."      
          ;;
    esac                        
  fi
  
  for i in $TEMPLATES; do
    # Add 'once' to the docker-compose (dc-*.yml) file to only run once
    if [[ "$i" != *-once* || ! -f ${i}.run ]]; then
      echo ">> docker-compose -f $i build"
      docker-compose -f $i build
      echo ">> docker-compose -f $i up -d"      
      docker-compose -f $i up -d
      touch ${i}.run
    fi
  done
  
  end_time
}

doinit() {

  for cmd in "${TOOLS[@]}"
  do 
    echo "Checking for dependencies... ($cmd)"
    command_exists $cmd
    echo "$cmd (present)"  
  done

  if [ -f $DIR/default.yml ]; then
    read -p 'Prompt for new settings (will overwrite previous choices)? YES/NO: ' answer
    case "${answer}" in
        [yY]|[yY][eE][sS])
            create_default_yml            
            ;;
        *)
          echo "Continue with existing default.yml..."      
          ;;
    esac                        
   else
     create_default_yml
  fi 
  read -p 'Build the system? YES/NO: ' answer
  case "${answer}" in
      [yY]|[yY][eE][sS])
          build            
          ;;
      *)
        echo "Build aborted..."      
        ;;
  esac  
  
}

THIS_MACHINE=""

find_machine() {
  echo "Trying to determine machine name..."
  DOCKER_MACHINES=$(docker-machine ls --filter 'state=Running' -q)
  HOTROD_MACHINES=""
  
  for i in $DOCKER_MACHINES; do
     LABELS=$(docker-machine inspect $i --format="{{ range .HostOptions.EngineOptions.Labels }}{{ . }} {{ end }}" 2>&1 | tr ' ' "\n")
     if [[ "$LABELS" == *"Hotrod=True"* ]]; then
       for l in $LABELS; do
          if [[ "$l" == *"HotrodProj"* && "$l" == *"$HOTROD_PROJNAME"* ]]; then
            THIS_MACHINE=$(trim $i)
          fi
        done
     fi
  done
  set +x
}

weave_proxy() {
  docker $(docker-machine config $THIS_MACHINE) run --rm --privileged --net=host -v /var/run/docker.sock:/var/run/docker.sock -v /proc:/hostproc -e PROCFS=/hostproc -e DOCKERHUB_USER=weaveworks -e VERSION -e WEAVE_DEBUG -e WEAVE_DOCKER_ARGS -e WEAVEDNS_DOCKER_ARGS -e WEAVEPROXY_DOCKER_ARGS -e WEAVE_PASSWORD -e WEAVE_PORT -e WEAVE_CONTAINER_NAME -e DOCKER_BRIDGE -e PROXY_HOST=127.0.0.1 -e WEAVE_CIDR=none weaveworks/weaveexec:1.0.1 --local launch-proxy -d --no-default-ipam -H tcp://0.0.0.0:12345 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem
}

hotrodctl() {
  echo "Install hotrodctl..."
}

build() {
  if [[ "$HOTROD_PROJNAME" == "" ]]; then
    export HOTROD_PROJNAME=$(trim $(cat $DIR/default.yml | grep hotrod_project_name | cut -f2 -d':'))
    echo "Existing Project Found: $HOTROD_PROJNAME"
  fi 
  if [[ "$THIS_MACHINE" == "" ]]; then
    find_machine  
  fi 
  if [[ "$THIS_MACHINE" != "" ]]; then
    echo "Using: $THIS_MACHINE (for project: $HOTROD_PROJNAME)"  
  else
    echo "No machine found for project: $HOTROD_PROJNAME"
    echo "Perhaps run a helper script in bin/"
    echo ""
    exit 1
  fi
  weave_proxy
  hotrodctl
  eval $(docker-machine env $THIS_MACHINE)
  DOCKER_HOST="$(echo $DOCKER_HOST  | sed 's/:2376/:12345/')"
  echo "DOCKER_HOST: $DOCKER_HOST"
  compose_up
}

case "$COMMAND" in
    init)
        doinit 
        ;;
    up)
        compose_up
        ;;   
    test)
        build
        ;;
    *)
        echo "Unknown hotrod command '$COMMAND'" >&2
        usage
        ;;
esac        

