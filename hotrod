#!/bin/bash
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR

#Inspired by, bit copied from https://github.com/zettio/weave

usage() {
    echo "Usage:"
    echo "hotrod init"
    exit 1
}

COMMAND=$1

[ $# -gt 0 ] || usage

shift 1

CONFIGFILE=$DIR/default.yml
CONFIGTEMPLATE=$DIR/docs/default.yml

export FWDPORT=8999
export USER=$(whoami)
export HOTROD_HOST_USER=root
export HOTROD_HOST_SUDO=yes
export HOTROD_HOSTNAME=$HOTROD_HOSTNAME
export WEAVE_SECRET=$(openssl rand -hex 32)
export HOTROD_AUTH_SECRET=$(openssl rand -hex 32)
export HOTROD_ADMIN_AUTH_SECRET=$(openssl rand -hex 32)
export LDAP_MANAGER_PASSWORD=$(openssl rand -hex 12)
[ -n "$HOTROD_PROJECTFS" ]  || export HOTROD_PROJECTFS=https://github.com/panoptix-za/hotrod-projectfs.git
[ -n "$HOTROD_ADMIN_SETTINGS" ]  || export HOTROD_ADMIN_SETTINGS=https://github.com/panoptix-za/hotrod-admin-settings.git

# utility function to check whether a command can be executed by the shell
# see http://stackoverflow.com/questions/592620/how-to-check-if-a-program-exists-from-a-bash-script
command_exists () {
    command -v $1 >/dev/null 2>&1
}

# Technique from https://github.com/rroemhild/docker-ejabberd/blob/master/run
readonly PYTHON_JINJA2="import os;
import sys;
import jinja2;
sys.stdout.write(
    jinja2.Template
        (sys.stdin.read()
    ).render(env=os.environ))"

make_config() {
    echo "Generating config file..."
    cat ${CONFIGTEMPLATE} \
      | python -c "${PYTHON_JINJA2}" \
      > ${CONFIGFILE}
}

pull_project() {
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    cd $DIR
    chmod u+x ./bin/repo_init.sh
    ./bin/repo_init.sh
}

bootstrap() {
  read -p 'Proceed with bootstrap? YES/NO: ' answer
  case "${answer}" in
      [yY]|[yY][eE][sS])
          $DIR/bin/bootstrap.sh
          ;;
      *)
        echo "Skip Bootstrap"
#         exit 0
        ;;
  esac
}

highstate() {
  read -p 'Proceed with setup? YES/NO: ' answer
  case "${answer}" in
      [yY]|[yY][eE][sS])
          $DIR/bin/cloud_highstate.sh
          $DIR/bin/cloud_cluster.sh
          ;;
      *)
        echo "Skip Highstate"      
#         exit 0
        ;;
  esac
}

sshtunnel() {
  
  chmod u+x $DIR/bin/ssh.sh
  $DIR/bin/ssh.sh&
  sleep 5
  
}

stoptunnel() {
  PID=$(ps | grep "\-L8443" | grep -v grep | awk '{ print $1; }')
  kill $PID
}


updatehotrod() {
  $DIR/bin/hotrodctl_update.sh
}


# repos() {
#   read -p 'Initialise with default git repositories (recommended)? YES/NO: ' answer
#   case "${answer}" in
#       [yY]|[yY][eE][sS])
#       
#             set +e
#             RET=$(ps | grep -v grep | grep '\-L8443')
#             set -e
#                   
#             if [ "$RET" == "" ]; then
#               read -p 'Start ssh tunnel? YES/NO: ' answer
#               case "${answer}" in
#                   [yY]|[yY][eE][sS])          
#                       sshtunnel
#                       ;;
#                   *)
#                     echo "Skip stop/start ssh tunnel"      
#                     ;;
#               esac                        
#             fi
#       
# #             cd $DIR/project/admin
# #             git push hotrod master
# #             cd $DIR/project/hotrod
# #             git push hotrod master
# #             cd $DIR/project/projectfs
# #             git push hotrod master
# #             $DIR/bin/core_stop.sh
# #             $DIR/bin/core_start.sh 
#           ;;
#       *)
#         exit 0
#         ;;
#   esac
#    }

init() {
  echo "Checking for dependencies... (salt-ssh)"
  command_exists salt-ssh
  echo "salt-ssh (present)"  
  echo ""
  echo ""  
  clear
  echo "Welcome to the HotRod initialisation script"
  echo ""
  
  while true; do
    read -p "Please specify your HotRod server hostname [$HOTROD_HOSTNAME]:" hotrodurl
    [ -z $hotrodurl ] || HOTROD_HOSTNAME=$hotrodurl
    [  -n "$HOTROD_HOSTNAME" ] && break 
  done
  
  while true; do
    read -p "Please specify a username for $HOTROD_HOSTNAME [$HOTROD_HOST_USER]:" hotroduser
    [ -z $hotroduser ] || HOTROD_HOST_USER=$hotroduser
    [  -n "$HOTROD_HOST_USER" ] && break 
  done  
  
  read -p 'Use SUDO? YES/NO: ' answer
  case "${answer}" in
      [yY]|[yY][eE][sS])
          HOTROD_HOST_SUDO=True
          ;;
      *)
          HOTROD_HOST_SUDO=False
          ;;
  esac  
#   Salt should be able to run as the current user...  
#   read -p "Please specify a user [$USER]:" username
#   [ -z $username ] || USER=$username
  
  while true; do
     [ -n "$WEAVE_SECRET" ] && break
     read -p "Please specify a Weave Secret:" WEAVE_SECRET
  done
  while true; do
     [ -n "$HOTROD_AUTH_SECRET" ] && break
     read -p "Please specify a HotRod Auth Secret:" HOTROD_AUTH_SECRET
  done
  while true; do
     [ -n "$HOTROD_ADMIN_AUTH_SECRET" ] && break
     read -p "Please specify a HotRod-Admin Auth Secret:" HOTROD_ADMIN_AUTH_SECRET
  done 
  while true; do
     [ -n "$LDAP_MANAGER_PASSWORD" ] && break
     read -p "Please specify a LDAP Manager Password:" LDAP_MANAGER_PASSWORD
  done 
  while true; do
    read -p "Please specify your HotRod projectfs URL [$HOTROD_PROJECTFS]:" hotrodpfsurl
    [ -z $hotrodpfsurl ] || HOTROD_PROJECTFS=$hotrodpfsurl
    [  -n "$HOTROD_PROJECTFS" ] && break 
  done     
  while true; do
    read -p "Please specify your HotRod admin settings URL [$HOTROD_ADMIN_SETTINGS]:" hotrodasurl
    [ -z $hotrodasurl ] || HOTROD_ADMIN_SETTINGS=$hotrodasurl
    [  -n "$HOTROD_ADMIN_SETTINGS" ] && break 
  done     
  while true; do
    echo "Please provide a password for the default admin account."
    adminpasswd=$(slappasswd -h {SSHA} | base64)
    [ -z $adminpasswd ] || ADMIN_PASSWD=$adminpasswd
    [  -n "$ADMIN_PASSWD" ] && break 
  done  
  
  DEFAULT_USER='default'
  DEFAULT_USER_FIRSTNAME='Default'  
  DEFAULT_USER_LASTNAME='User'    
  
  
  while true; do
    read -p "Please specify your HotRod default username [$DEFAULT_USER]:" defaultuser
    [ -z $defaultuser ] || DEFAULT_USER=$defaultuser
    [  -n "$DEFAULT_USER" ] && break 
  done  
  while true; do
    read -p "Please specify your HotRod default user firstname [$DEFAULT_USER_FIRSTNAME]:" defaultuser
    [ -z $defaultuser ] || DEFAULT_USER_FIRSTNAME=$defaultuser
    [  -n "$DEFAULT_USER_FIRSTNAME" ] && break 
  done  
  while true; do
    read -p "Please specify your HotRod default user lastname [$DEFAULT_USER_LASTNAME]:" defaultuser
    [ -z $defaultuser ] || DEFAULT_USER_FIRSTNAME=$defaultuser
    [  -n "$DEFAULT_USER_FIRSTNAME" ] && break 
  done  
  while true; do
    echo "Please provide a password for the default user account."
    password=$(slappasswd -h {SSHA} | base64)
    [ -z $adminpasswd ] || DEFAULT_USER_PASSWD=$password
    [  -n "$DEFAULT_USER_PASSWD" ] && break 
  done  
 
  export ADMIN_PASSWD
  export DEFAULT_USER
  export DEFAULT_USER_FIRSTNAME
  export DEFAULT_USER_LASTNAME  
  export DEFAULT_USER_PASSWD
  
  [ -f $DIR/default.yml ] && mv $DIR/default.yml $DIR/default.yml.prev
  make_config
    
}

doinit() {
    if [ -f $DIR/default.yml ]; then
    read -p 'Prompt for new settings (will overwrite previous choices)? YES/NO: ' answer
    case "${answer}" in
        [yY]|[yY][eE][sS])
            init            
            ;;
        *)
          echo "Continue..."      
          ;;
    esac                        
  fi

  $DIR/mini.py
  
  echo "Bootstrapping project..." 
  pull_project
  
#   echo "Checking for  $DIR/salt/roster"
  
  if [ ! -f $DIR/salt/roster ]; then
    echo "" 
    echo "Please note!" 
    echo "You still need to create a 'salt/roster' file" 
    echo "Bootstrap cannot proceed..." 
    echo "See salt/roster.example" 
    exit 1
  fi
  
  bootstrap
  
  highstate
  
#   repos
  
  updatehotrod
}


case "$COMMAND" in
    pull)
        pull_project
        ;;
    init)
        doinit 
        ;;
    bootstrap)
        bootstrap 
        ;;
    highstate)
        highstate
        ;;
#     repos)
#         repos
#         ;;    
    sshtunnel)
        sshtunnel
        ;;
    stoptunnel)
        stoptunnel
        ;;        
    updatehotrod)
        updatehotrod
        ;;        
    *)
        echo "Unknown hotrod command '$COMMAND'" >&2
        usage
        ;;
esac        

